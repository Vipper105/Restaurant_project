package tp.kits3.nickname;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class BookServletTest
 */
@WebServlet("/bookservlettest")
public class BookServlet2Test extends TagServlet2Test {
	private static final long serialVersionUID = 1L;
	private static final long serialVersionUID = 1L;
	private Connection conn;
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BookServlet2Test() {
        super();
        // TODO Auto-generated constructor stub
    }
 

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    		throws ServletException, IOException {
    	Statement stmt=null;
		ResultSet rs=null;
		// restaurant : ten DB
		try {
//			Class.forName("org.mariadb.jdbc.Driver");
//			Connection conn=DriverManager.getConnection("jdbc:mariadb://localhost:3306/restaurant","root","123123");
			
			// ready SQL
//			Statement vs PerpareStathment
			stmt=conn.createStatement();
			String sql="select * from tag";
			// Get result from DB
			stmt.execute(sql);   // when use? just retrieve (select) , return về boolean
			//boolean rsb=stmt.execute(sql);   // check is connect
		    rs=stmt.executeQuery(sql);  //   executeQuery need get data
			//stmt.executeQuery(sql);  // when use? update,insert, return về ResultSet
			
			while(rs.next()) {
				int tid=rs.getInt("tagid");
				String tname=rs.getString("tgname");
				System.out.println(tid +" : "+tname);
				
			}
		
//			conn.close();  // **Nếu đóng lại ở đây thì nó sẽ đóng luống lại và ko thực hiện phương thức service
			
//			System.out.println("Connect DB successfully");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// to save memory
			// all stream have to close
			try {rs.close();} catch (SQLException e) {}
			try {stmt.close();} catch (SQLException e) {}
					
		}
    }

	@Override
	protected void resolver(ResultSet resultSet) {
		
		
	}

}
